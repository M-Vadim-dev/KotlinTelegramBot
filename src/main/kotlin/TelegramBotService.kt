import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json
import org.example.Question
import java.net.URI
import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse

const val TELEGRAM_API_URL = "https://api.telegram.org"
const val LEARN_WORDS_CLICKED = "learn_words_clicked"
const val STATISTICS_CLICKED = "statistics_clicked"
const val RESET_CLICKED = "reset_clicked"
const val CALLBACK_DATA_ANSWER_PREFIX = "answer_"
const val MAIN_MENU = "main_menu"
const val LEARN_WORDS_MENU = "learn_words_menu"

class TelegramBotService(private val botToken: String, private val json: Json) {

    private val client: HttpClient = HttpClient.newBuilder().build()

    fun getUpdates(updateId: Long): String {
        val urlGetUpdates = "$TELEGRAM_API_URL/bot$botToken/getUpdates?offset=$updateId"
        val request: HttpRequest = HttpRequest.newBuilder().uri(URI.create(urlGetUpdates)).build()
        while (true) {
            val result = runCatching { client.send(request, HttpResponse.BodyHandlers.ofString()) }
            if (result.isSuccess) {
                return result.getOrNull()?.body()
                    ?: "{\"status\":\"error\",\"message\":\"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\"}"
            } else {
                println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${result.exceptionOrNull()?.message}")
                Thread.sleep(5000)
            }
        }
    }

    fun sendMessage(chatId: Long, message: String): String {
        val urlSenMessage = "$TELEGRAM_API_URL/bot$botToken/sendMessage"
        val requestBody = SendMessageRequest(
            chatId = chatId,
            text = message,
        )
        val requestBodyString = json.encodeToString(requestBody)
        val request: HttpRequest = HttpRequest.newBuilder().uri(URI.create(urlSenMessage))
            .header("Content-type", "application/json")
            .POST(HttpRequest.BodyPublishers.ofString(requestBodyString))
            .build()
        return runCatching {
            val response: HttpResponse<String> = client.send(request, HttpResponse.BodyHandlers.ofString())
            response.body()
        }.getOrElse { e ->
            println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}")
            "{\"status\":\"error\",\"message\":\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è\"}"
        }
    }

    fun sendMenu(chatId: Long): String {
        val urlSendMenu = "$TELEGRAM_API_URL/bot$botToken/sendMessage"
        val requestBody = SendMessageRequest(
            chatId = chatId,
            text = """–†–µ–∂–∏–º –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤.
                |
                |–í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.
                |–ï—Å–ª–∏ –≤—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ,—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ª–æ–≤–æ –ø–æ–º–µ—Ç–∏—Ç—Å—è –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–µ –∏ –Ω–µ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è.
            """.trimMargin(),
            replyMarkup = ReplyMarkup(
                listOf(
                    listOf(
                        InlineKeyboard(text = "‚úç –ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–∑—É—á–µ–Ω–∏—é", callbackData = LEARN_WORDS_CLICKED),
                    ),
                    listOf(
                        InlineKeyboard(text = "‚Ñπ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callbackData = STATISTICS_CLICKED),
                        InlineKeyboard(text = "‚¨Ö –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callbackData = MAIN_MENU),
                    )
                )
            )
        )
        val requestBodyString = json.encodeToString(requestBody)
        val request: HttpRequest = HttpRequest.newBuilder().uri(URI.create(urlSendMenu))
            .header("Content-type", "application/json")
            .POST(HttpRequest.BodyPublishers.ofString(requestBodyString))
            .build()
        return runCatching {
            val response: HttpResponse<String> = client.send(request, HttpResponse.BodyHandlers.ofString())
            response.body()
        }.getOrElse { e ->
            println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é: ${e.message}")
            "{\"status\":\"error\",\"message\":\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é\"}"
        }
    }

    fun sendMainMenu(chatId: Long): String {
        val urlSendMenu = "$TELEGRAM_API_URL/bot$botToken/sendMessage"
        val requestBody = SendMessageRequest(
            chatId = chatId,
            text = """–ü—Ä–∏–≤–µ—Ç!
                |–õ–µ–≥–∫–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∂–¥–µ—Ç —Ç–µ–±—è!
                |–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ –æ–±—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.
            """.trimMargin(),
            replyMarkup = ReplyMarkup(
                listOf(
                    listOf(InlineKeyboard(text = "\uD83D\uDCD6 –ò–∑—É—á–∞—Ç—å —Å–ª–æ–≤–∞", callbackData = LEARN_WORDS_MENU)),
                    listOf(InlineKeyboard(text = "üîÑÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callbackData = RESET_CLICKED)),
                )
            )
        )
        val requestBodyString = json.encodeToString(requestBody)
        val request: HttpRequest = HttpRequest.newBuilder().uri(URI.create(urlSendMenu))
            .header("Content-type", "application/json")
            .POST(HttpRequest.BodyPublishers.ofString(requestBodyString))
            .build()
        return runCatching {
            val response: HttpResponse<String> = client.send(request, HttpResponse.BodyHandlers.ofString())
            response.body()
        }.getOrElse { e ->
            println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: ${e.message}")
            "{\"status\":\"error\",\"message\":\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\"}"
        }
    }

    fun sendQuestion(chatId: Long, question: Question): String {
        val urlSendQuestion = "$TELEGRAM_API_URL/bot$botToken/sendMessage"
        val requestBody = SendMessageRequest(
            chatId = chatId,
            text = "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: ${question.correctAnswer.original}",
            replyMarkup = ReplyMarkup(
                listOf(
                    question.variants.mapIndexed { index, word ->
                        InlineKeyboard(text = word.translate, callbackData = "$CALLBACK_DATA_ANSWER_PREFIX$index")
                    },
                    listOf(InlineKeyboard(text = "‚¨Ö –ù–∞–∑–∞–¥", callbackData = LEARN_WORDS_MENU)),
                )
            )
        )

        val requestBodyString = json.encodeToString(requestBody)
        val request: HttpRequest = HttpRequest.newBuilder()
            .uri(URI.create(urlSendQuestion))
            .header("Content-type", "application/json")
            .POST(HttpRequest.BodyPublishers.ofString(requestBodyString))
            .build()
        return runCatching {
            val response: HttpResponse<String> = client.send(request, HttpResponse.BodyHandlers.ofString())
            response.body()
        }.getOrElse { e ->
            println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞: ${e.message}")
            "{\"status\":\"error\",\"message\":\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞\"}"
        }
    }
}